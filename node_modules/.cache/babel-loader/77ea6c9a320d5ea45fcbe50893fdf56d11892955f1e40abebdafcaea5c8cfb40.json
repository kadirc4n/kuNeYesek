{"ast":null,"code":"import axios from 'axios';\nimport Papa from 'papaparse';\n\n// Google Sheets'i CSV olarak dışa aktarma URL'ini oluştur\nconst getGoogleSheetsCSVUrl = (sheetId, gid = 0) => {\n  return `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv&gid=${gid}`;\n};\n\n// CSV verilerini işleme fonksiyonu\nconst processMenuData = csvData => {\n  const data = [];\n\n  // Başlık satırını kontrol et - \"TARİH\" sütununu bul\n  const headers = csvData[0];\n  const dateIndex = headers.findIndex(header => header && header.toLowerCase().includes('tarih'));\n  if (dateIndex === -1) {\n    throw new Error('CSV dosyasında tarih sütunu bulunamadı.');\n  }\n\n  // Her bir satırı işle (başlık satırını atla)\n  for (let i = 1; i < csvData.length; i++) {\n    const row = csvData[i];\n\n    // Boş satırları ve imza satırlarını atla\n    if (!row || row.every(cell => !cell || !cell.trim()) || row[0] && row[0].toLowerCase().includes('diyetisyen')) continue;\n    const dateStr = row[dateIndex];\n    if (!dateStr) continue;\n\n    // Tarih formatını kontrol et ve dönüştür\n    const dateObj = parseDate(dateStr);\n    if (!dateObj) continue;\n\n    // Menü öğelerini topla (tarih sütunu hariç ve boş olmayan hücreler)\n    const menuItems = row.filter((cell, index) => index !== dateIndex && cell && cell.trim() && !cell.toLowerCase().includes('kkal')).map(item => item.trim());\n    if (menuItems.length > 0) {\n      data.push({\n        date: dateObj,\n        items: menuItems\n      });\n    }\n  }\n  return data;\n};\n\n// Tarih ayrıştırma fonksiyonu (farklı formatları destekler)\nconst parseDate = dateStr => {\n  // Türkçe tarih formatları için ayrıştırma\n  const patterns = [\n  // DD.MM.YYYY\n  {\n    regex: /(\\d{1,2})[\\.](\\d{1,2})[\\.](\\d{4})/,\n    format: match => new Date(match[3], match[2] - 1, match[1])\n  },\n  // DD/MM/YYYY\n  {\n    regex: /(\\d{1,2})[\\/](\\d{1,2})[\\/](\\d{4})/,\n    format: match => new Date(match[3], match[2] - 1, match[1])\n  },\n  // DD MMMM YYYY (örn: 10 Mart 2025)\n  {\n    regex: /(\\d{1,2})\\s+(Ocak|Şubat|Mart|Nisan|Mayıs|Haziran|Temmuz|Ağustos|Eylül|Ekim|Kasım|Aralık)\\s+(\\d{4})/i,\n    format: match => {\n      const months = {\n        'ocak': 0,\n        'şubat': 1,\n        'mart': 2,\n        'nisan': 3,\n        'mayıs': 4,\n        'haziran': 5,\n        'temmuz': 6,\n        'ağustos': 7,\n        'eylül': 8,\n        'ekim': 9,\n        'kasım': 10,\n        'aralık': 11\n      };\n      return new Date(match[3], months[match[2].toLowerCase()], match[1]);\n    }\n  }];\n  for (const pattern of patterns) {\n    const match = dateStr.match(pattern.regex);\n    if (match) {\n      return pattern.format(match);\n    }\n  }\n\n  // Diğer genel formatlar için JS Date objesini kullan\n  const date = new Date(dateStr);\n  return !isNaN(date.getTime()) ? date : null;\n};\n\n// Ana fonksiyon: Menü verilerini getir\nexport const fetchMenuData = async () => {\n  try {\n    // Google Sheets ID'si\n    const sheetId = '1h0bA-ByWSHOF5CGWMgsHPkSZ7WgiXMyTwrZlcu6Po0E';\n    const csvUrl = getGoogleSheetsCSVUrl(sheetId);\n\n    // CSV dosyasını indir\n    const response = await axios.get(csvUrl, {\n      headers: {\n        'Content-Type': 'text/csv; charset=utf-8'\n      }\n    });\n\n    // CSV'yi ayrıştır\n    return new Promise((resolve, reject) => {\n      Papa.parse(response.data, {\n        complete: results => {\n          try {\n            if (!results.data || results.data.length === 0) {\n              throw new Error('CSV verisi boş veya geçersiz.');\n            }\n            const processedData = processMenuData(results.data);\n            if (processedData.length === 0) {\n              throw new Error('İşlenebilir menü verisi bulunamadı.');\n            }\n            resolve(processedData);\n          } catch (err) {\n            console.error('Veri işleme hatası:', err);\n            reject(err);\n          }\n        },\n        error: error => {\n          console.error('CSV ayrıştırma hatası:', error);\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('CSV verisi alınırken hata oluştu:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","Papa","getGoogleSheetsCSVUrl","sheetId","gid","processMenuData","csvData","data","headers","dateIndex","findIndex","header","toLowerCase","includes","Error","i","length","row","every","cell","trim","dateStr","dateObj","parseDate","menuItems","filter","index","map","item","push","date","items","patterns","regex","format","match","Date","months","pattern","isNaN","getTime","fetchMenuData","csvUrl","response","get","Promise","resolve","reject","parse","complete","results","processedData","err","console","error"],"sources":["/Users/kc4ca/kastamonu-yemekhane/src/utils/menuUtils.js"],"sourcesContent":["import axios from 'axios';\nimport Papa from 'papaparse';\n\n// Google Sheets'i CSV olarak dışa aktarma URL'ini oluştur\nconst getGoogleSheetsCSVUrl = (sheetId, gid = 0) => {\n  return `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv&gid=${gid}`;\n};\n\n// CSV verilerini işleme fonksiyonu\nconst processMenuData = (csvData) => {\n  const data = [];\n  \n  // Başlık satırını kontrol et - \"TARİH\" sütununu bul\n  const headers = csvData[0];\n  const dateIndex = headers.findIndex(header => \n    header && header.toLowerCase().includes('tarih'));\n  \n  if (dateIndex === -1) {\n    throw new Error('CSV dosyasında tarih sütunu bulunamadı.');\n  }\n  \n  // Her bir satırı işle (başlık satırını atla)\n  for (let i = 1; i < csvData.length; i++) {\n    const row = csvData[i];\n    \n    // Boş satırları ve imza satırlarını atla\n    if (!row || row.every(cell => !cell || !cell.trim()) || \n        (row[0] && row[0].toLowerCase().includes('diyetisyen'))) continue;\n    \n    const dateStr = row[dateIndex];\n    if (!dateStr) continue;\n    \n    // Tarih formatını kontrol et ve dönüştür\n    const dateObj = parseDate(dateStr);\n    if (!dateObj) continue;\n    \n    // Menü öğelerini topla (tarih sütunu hariç ve boş olmayan hücreler)\n    const menuItems = row\n      .filter((cell, index) => \n        index !== dateIndex && \n        cell && \n        cell.trim() && \n        !cell.toLowerCase().includes('kkal'))\n      .map(item => item.trim());\n    \n    if (menuItems.length > 0) {\n      data.push({\n        date: dateObj,\n        items: menuItems\n      });\n    }\n  }\n  \n  return data;\n};\n\n// Tarih ayrıştırma fonksiyonu (farklı formatları destekler)\nconst parseDate = (dateStr) => {\n  // Türkçe tarih formatları için ayrıştırma\n  const patterns = [\n    // DD.MM.YYYY\n    {\n      regex: /(\\d{1,2})[\\.](\\d{1,2})[\\.](\\d{4})/,\n      format: (match) => new Date(match[3], match[2] - 1, match[1])\n    },\n    // DD/MM/YYYY\n    {\n      regex: /(\\d{1,2})[\\/](\\d{1,2})[\\/](\\d{4})/,\n      format: (match) => new Date(match[3], match[2] - 1, match[1])\n    },\n    // DD MMMM YYYY (örn: 10 Mart 2025)\n    {\n      regex: /(\\d{1,2})\\s+(Ocak|Şubat|Mart|Nisan|Mayıs|Haziran|Temmuz|Ağustos|Eylül|Ekim|Kasım|Aralık)\\s+(\\d{4})/i,\n      format: (match) => {\n        const months = {\n          'ocak': 0, 'şubat': 1, 'mart': 2, 'nisan': 3, 'mayıs': 4, 'haziran': 5,\n          'temmuz': 6, 'ağustos': 7, 'eylül': 8, 'ekim': 9, 'kasım': 10, 'aralık': 11\n        };\n        return new Date(match[3], months[match[2].toLowerCase()], match[1]);\n      }\n    }\n  ];\n  \n  for (const pattern of patterns) {\n    const match = dateStr.match(pattern.regex);\n    if (match) {\n      return pattern.format(match);\n    }\n  }\n  \n  // Diğer genel formatlar için JS Date objesini kullan\n  const date = new Date(dateStr);\n  return !isNaN(date.getTime()) ? date : null;\n};\n\n// Ana fonksiyon: Menü verilerini getir\nexport const fetchMenuData = async () => {\n  try {\n    // Google Sheets ID'si\n    const sheetId = '1h0bA-ByWSHOF5CGWMgsHPkSZ7WgiXMyTwrZlcu6Po0E';\n    const csvUrl = getGoogleSheetsCSVUrl(sheetId);\n    \n    // CSV dosyasını indir\n    const response = await axios.get(csvUrl, {\n      headers: {\n        'Content-Type': 'text/csv; charset=utf-8'\n      }\n    });\n    \n    // CSV'yi ayrıştır\n    return new Promise((resolve, reject) => {\n      Papa.parse(response.data, {\n        complete: (results) => {\n          try {\n            if (!results.data || results.data.length === 0) {\n              throw new Error('CSV verisi boş veya geçersiz.');\n            }\n            const processedData = processMenuData(results.data);\n            if (processedData.length === 0) {\n              throw new Error('İşlenebilir menü verisi bulunamadı.');\n            }\n            resolve(processedData);\n          } catch (err) {\n            console.error('Veri işleme hatası:', err);\n            reject(err);\n          }\n        },\n        error: (error) => {\n          console.error('CSV ayrıştırma hatası:', error);\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('CSV verisi alınırken hata oluştu:', error);\n    throw error;\n  }\n};      "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}