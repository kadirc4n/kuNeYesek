{"ast":null,"code":"import axios from 'axios';\nimport Papa from 'papaparse';\n\n// Google Sheets'i CSV olarak dışa aktarma URL'ini oluştur\nconst getGoogleSheetsCSVUrl = (sheetId, gid = 0) => {\n  return `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&gid=${gid}`;\n};\n\n// CSV verilerini işleme fonksiyonu\nconst processMenuData = csvData => {\n  const data = [];\n  try {\n    // Başlık satırını kontrol et - \"TARİH\" sütununu bul\n    const headers = csvData[0];\n    console.log('Headers:', headers);\n    if (!headers || !Array.isArray(headers)) {\n      throw new Error('Geçersiz CSV başlık yapısı');\n    }\n    const dateIndex = headers.findIndex(header => header && typeof header === 'string' && header.toString().toLowerCase().includes('tarih'));\n    console.log('Date Index:', dateIndex);\n    if (dateIndex === -1) {\n      throw new Error('CSV dosyasında tarih sütunu bulunamadı.');\n    }\n\n    // Her bir satırı işle (başlık satırını atla)\n    for (let i = 1; i < csvData.length; i++) {\n      const row = csvData[i];\n\n      // Boş satırları ve imza satırlarını atla\n      if (!row || !Array.isArray(row) || row.every(cell => !cell || !cell.toString().trim()) || row[0] && row[0].toString().toLowerCase().includes('diyetisyen')) {\n        continue;\n      }\n      const dateStr = row[dateIndex];\n      if (!dateStr) continue;\n\n      // Tarih formatını kontrol et ve dönüştür\n      const dateObj = parseDate(dateStr.toString());\n      if (!dateObj) continue;\n\n      // Menü öğelerini ve kalorileri topla\n      const menuItems = [];\n      for (let j = 0; j < row.length; j++) {\n        if (j !== dateIndex && row[j] && row[j].toString().trim()) {\n          const cell = row[j].toString().trim();\n          const nextCell = row[j + 1] ? row[j + 1].toString().trim() : '';\n\n          // Eğer sonraki hücre kalori bilgisi içeriyorsa\n          if (nextCell.toLowerCase().includes('kkal')) {\n            const calories = parseInt(nextCell);\n            if (!isNaN(calories)) {\n              menuItems.push(`${cell} ${calories}KKAL`);\n              j++; // Kalori hücresini atla\n            } else {\n              menuItems.push(cell);\n            }\n          } else {\n            menuItems.push(cell);\n          }\n        }\n      }\n      if (menuItems.length > 0) {\n        data.push({\n          date: dateObj,\n          items: menuItems\n        });\n      }\n    }\n    return data;\n  } catch (error) {\n    console.error('CSV işleme hatası:', error);\n    console.log('CSV Data:', csvData);\n    throw error;\n  }\n};\n\n// Tarih ayrıştırma fonksiyonu (farklı formatları destekler)\nconst parseDate = dateStr => {\n  if (!dateStr || typeof dateStr !== 'string') {\n    console.log('Invalid date string:', dateStr);\n    return null;\n  }\n\n  // Tarih formatını temizle\n  const cleanDateStr = dateStr.trim();\n  console.log('Parsing date:', cleanDateStr);\n\n  // Türkçe tarih formatları için ayrıştırma\n  const patterns = [\n  // DD.MM.YYYY\n  {\n    regex: /(\\d{1,2})[\\.](\\d{1,2})[\\.](\\d{4})/,\n    format: match => new Date(match[3], match[2] - 1, match[1])\n  },\n  // DD/MM/YYYY\n  {\n    regex: /(\\d{1,2})[\\/](\\d{1,2})[\\/](\\d{4})/,\n    format: match => new Date(match[3], match[2] - 1, match[1])\n  },\n  // DD MMMM YYYY (örn: 10 Mart 2025)\n  {\n    regex: /(\\d{1,2})\\s+(Ocak|Şubat|Mart|Nisan|Mayıs|Haziran|Temmuz|Ağustos|Eylül|Ekim|Kasım|Aralık)\\s+(\\d{4})/i,\n    format: match => {\n      const months = {\n        'ocak': 0,\n        'şubat': 1,\n        'mart': 2,\n        'nisan': 3,\n        'mayıs': 4,\n        'haziran': 5,\n        'temmuz': 6,\n        'ağustos': 7,\n        'eylül': 8,\n        'ekim': 9,\n        'kasım': 10,\n        'aralık': 11\n      };\n      return new Date(match[3], months[match[2].toLowerCase()], match[1]);\n    }\n  }];\n  for (const pattern of patterns) {\n    const match = cleanDateStr.match(pattern.regex);\n    if (match) {\n      const date = pattern.format(match);\n      console.log('Matched date:', date);\n      return date;\n    }\n  }\n\n  // Diğer genel formatlar için JS Date objesini kullan\n  const date = new Date(cleanDateStr);\n  const isValid = !isNaN(date.getTime());\n  console.log('JS Date parse result:', date, 'isValid:', isValid);\n  return isValid ? date : null;\n};\n\n// Ana fonksiyon: Menü verilerini getir\nexport const fetchMenuData = async () => {\n  try {\n    // Google Sheets ID'si\n    const sheetId = '1h0bA-ByWSHOF5CGWMgsHPkSZ7WgiXMyTwrZlcu6Po0E';\n\n    // Alternatif URL formatları - birini deneyelim\n    const urls = [`https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&gid=0`, `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv&gid=0`, `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv&id=${sheetId}&gid=0`];\n    let response = null;\n    let error = null;\n\n    // Her URL'yi sırayla dene\n    for (const url of urls) {\n      try {\n        console.log('Fetching from URL:', url);\n        response = await axios.get(url, {\n          headers: {\n            'Accept': 'text/csv,application/json;q=0.9,*/*;q=0.8',\n            'Content-Type': 'text/csv; charset=utf-8'\n          }\n        });\n        console.log('Response received:', response.status);\n\n        // Başarılı yanıt aldıysak döngüden çık\n        if (response.status === 200 && response.data) {\n          break;\n        }\n      } catch (err) {\n        console.error(`Error fetching from ${url}:`, err.message);\n        error = err;\n      }\n    }\n\n    // Hiçbir URL çalışmadıysa hata fırlat\n    if (!response || !response.data) {\n      throw error || new Error('Hiçbir URL\\'den veri çekilemedi');\n    }\n\n    // CSV içeriğini kontrol et\n    console.log('CSV data preview:', response.data.substring(0, 200));\n\n    // CSV'yi ayrıştır\n    return new Promise((resolve, reject) => {\n      Papa.parse(response.data, {\n        header: false,\n        skipEmptyLines: true,\n        complete: results => {\n          try {\n            console.log('Papa Parse results:', results);\n            if (!results.data || results.data.length === 0) {\n              throw new Error('CSV verisi boş veya geçersiz.');\n            }\n\n            // Başlık satırını manuel olarak kontrol et\n            const headers = results.data[0];\n            console.log('Headers:', headers);\n\n            // TARİH sütununu manuel olarak bul\n            let dateIndex = -1;\n            for (let i = 0; i < headers.length; i++) {\n              const header = headers[i];\n              if (header && header.toString().toUpperCase().includes('TARİH')) {\n                dateIndex = i;\n                break;\n              }\n            }\n            console.log('Manually found date index:', dateIndex);\n\n            // Eğer TARİH sütunu bulunamadıysa, ilk sütunu kullan\n            if (dateIndex === -1) {\n              console.warn('TARİH sütunu bulunamadı, ilk sütun kullanılıyor');\n              dateIndex = 0;\n            }\n\n            // Veriyi manuel olarak işle\n            const processedData = [];\n            for (let i = 1; i < results.data.length; i++) {\n              const row = results.data[i];\n              if (!row || row.length < 2) continue;\n              const dateStr = row[dateIndex];\n              if (!dateStr) continue;\n\n              // Tarih formatını kontrol et\n              const dateObj = parseDate(dateStr.toString());\n              if (!dateObj) continue;\n\n              // Menü öğelerini topla\n              const menuItems = [];\n              for (let j = 0; j < row.length; j++) {\n                if (j !== dateIndex && row[j] && row[j].toString().trim() && !row[j].toString().toLowerCase().includes('kkal')) {\n                  menuItems.push(row[j].toString().trim());\n                }\n              }\n              if (menuItems.length > 0) {\n                processedData.push({\n                  date: dateObj,\n                  items: menuItems\n                });\n              }\n            }\n            console.log('Processed data:', processedData);\n            if (processedData.length === 0) {\n              throw new Error('İşlenebilir menü verisi bulunamadı.');\n            }\n            resolve(processedData);\n          } catch (err) {\n            console.error('Veri işleme hatası:', err);\n            reject(err);\n          }\n        },\n        error: error => {\n          console.error('CSV ayrıştırma hatası:', error);\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('CSV verisi alınırken hata oluştu:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","Papa","getGoogleSheetsCSVUrl","sheetId","gid","processMenuData","csvData","data","headers","console","log","Array","isArray","Error","dateIndex","findIndex","header","toString","toLowerCase","includes","i","length","row","every","cell","trim","dateStr","dateObj","parseDate","menuItems","j","nextCell","calories","parseInt","isNaN","push","date","items","error","cleanDateStr","patterns","regex","format","match","Date","months","pattern","isValid","getTime","fetchMenuData","urls","response","url","get","status","err","message","substring","Promise","resolve","reject","parse","skipEmptyLines","complete","results","toUpperCase","warn","processedData"],"sources":["/Users/kc4ca/kastamonu-yemekhane/src/utils/menuUtils.js"],"sourcesContent":["import axios from 'axios';\nimport Papa from 'papaparse';\n\n// Google Sheets'i CSV olarak dışa aktarma URL'ini oluştur\nconst getGoogleSheetsCSVUrl = (sheetId, gid = 0) => {\n  return `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&gid=${gid}`;\n};\n\n// CSV verilerini işleme fonksiyonu\nconst processMenuData = (csvData) => {\n  const data = [];\n  \n  try {\n    // Başlık satırını kontrol et - \"TARİH\" sütununu bul\n    const headers = csvData[0];\n    console.log('Headers:', headers);\n    \n    if (!headers || !Array.isArray(headers)) {\n      throw new Error('Geçersiz CSV başlık yapısı');\n    }\n\n    const dateIndex = headers.findIndex(header => \n      header && typeof header === 'string' && \n      header.toString().toLowerCase().includes('tarih'));\n    \n    console.log('Date Index:', dateIndex);\n    \n    if (dateIndex === -1) {\n      throw new Error('CSV dosyasında tarih sütunu bulunamadı.');\n    }\n    \n    // Her bir satırı işle (başlık satırını atla)\n    for (let i = 1; i < csvData.length; i++) {\n      const row = csvData[i];\n      \n      // Boş satırları ve imza satırlarını atla\n      if (!row || !Array.isArray(row) || row.every(cell => !cell || !cell.toString().trim()) || \n          (row[0] && row[0].toString().toLowerCase().includes('diyetisyen'))) {\n        continue;\n      }\n      \n      const dateStr = row[dateIndex];\n      if (!dateStr) continue;\n      \n      // Tarih formatını kontrol et ve dönüştür\n      const dateObj = parseDate(dateStr.toString());\n      if (!dateObj) continue;\n      \n      // Menü öğelerini ve kalorileri topla\n      const menuItems = [];\n      for (let j = 0; j < row.length; j++) {\n        if (j !== dateIndex && row[j] && row[j].toString().trim()) {\n          const cell = row[j].toString().trim();\n          const nextCell = row[j + 1] ? row[j + 1].toString().trim() : '';\n          \n          // Eğer sonraki hücre kalori bilgisi içeriyorsa\n          if (nextCell.toLowerCase().includes('kkal')) {\n            const calories = parseInt(nextCell);\n            if (!isNaN(calories)) {\n              menuItems.push(`${cell} ${calories}KKAL`);\n              j++; // Kalori hücresini atla\n            } else {\n              menuItems.push(cell);\n            }\n          } else {\n            menuItems.push(cell);\n          }\n        }\n      }\n      \n      if (menuItems.length > 0) {\n        data.push({\n          date: dateObj,\n          items: menuItems\n        });\n      }\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('CSV işleme hatası:', error);\n    console.log('CSV Data:', csvData);\n    throw error;\n  }\n};\n\n// Tarih ayrıştırma fonksiyonu (farklı formatları destekler)\nconst parseDate = (dateStr) => {\n  if (!dateStr || typeof dateStr !== 'string') {\n    console.log('Invalid date string:', dateStr);\n    return null;\n  }\n  \n  // Tarih formatını temizle\n  const cleanDateStr = dateStr.trim();\n  console.log('Parsing date:', cleanDateStr);\n  \n  // Türkçe tarih formatları için ayrıştırma\n  const patterns = [\n    // DD.MM.YYYY\n    {\n      regex: /(\\d{1,2})[\\.](\\d{1,2})[\\.](\\d{4})/,\n      format: (match) => new Date(match[3], match[2] - 1, match[1])\n    },\n    // DD/MM/YYYY\n    {\n      regex: /(\\d{1,2})[\\/](\\d{1,2})[\\/](\\d{4})/,\n      format: (match) => new Date(match[3], match[2] - 1, match[1])\n    },\n    // DD MMMM YYYY (örn: 10 Mart 2025)\n    {\n      regex: /(\\d{1,2})\\s+(Ocak|Şubat|Mart|Nisan|Mayıs|Haziran|Temmuz|Ağustos|Eylül|Ekim|Kasım|Aralık)\\s+(\\d{4})/i,\n      format: (match) => {\n        const months = {\n          'ocak': 0, 'şubat': 1, 'mart': 2, 'nisan': 3, 'mayıs': 4, 'haziran': 5,\n          'temmuz': 6, 'ağustos': 7, 'eylül': 8, 'ekim': 9, 'kasım': 10, 'aralık': 11\n        };\n        return new Date(match[3], months[match[2].toLowerCase()], match[1]);\n      }\n    }\n  ];\n  \n  for (const pattern of patterns) {\n    const match = cleanDateStr.match(pattern.regex);\n    if (match) {\n      const date = pattern.format(match);\n      console.log('Matched date:', date);\n      return date;\n    }\n  }\n  \n  // Diğer genel formatlar için JS Date objesini kullan\n  const date = new Date(cleanDateStr);\n  const isValid = !isNaN(date.getTime());\n  console.log('JS Date parse result:', date, 'isValid:', isValid);\n  return isValid ? date : null;\n};\n\n// Ana fonksiyon: Menü verilerini getir\nexport const fetchMenuData = async () => {\n  try {\n    // Google Sheets ID'si\n    const sheetId = '1h0bA-ByWSHOF5CGWMgsHPkSZ7WgiXMyTwrZlcu6Po0E';\n    \n    // Alternatif URL formatları - birini deneyelim\n    const urls = [\n      `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv&gid=0`,\n      `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv&gid=0`,\n      `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv&id=${sheetId}&gid=0`\n    ];\n    \n    let response = null;\n    let error = null;\n    \n    // Her URL'yi sırayla dene\n    for (const url of urls) {\n      try {\n        console.log('Fetching from URL:', url);\n        response = await axios.get(url, {\n          headers: {\n            'Accept': 'text/csv,application/json;q=0.9,*/*;q=0.8',\n            'Content-Type': 'text/csv; charset=utf-8'\n          }\n        });\n        \n        console.log('Response received:', response.status);\n        \n        // Başarılı yanıt aldıysak döngüden çık\n        if (response.status === 200 && response.data) {\n          break;\n        }\n      } catch (err) {\n        console.error(`Error fetching from ${url}:`, err.message);\n        error = err;\n      }\n    }\n    \n    // Hiçbir URL çalışmadıysa hata fırlat\n    if (!response || !response.data) {\n      throw error || new Error('Hiçbir URL\\'den veri çekilemedi');\n    }\n    \n    // CSV içeriğini kontrol et\n    console.log('CSV data preview:', response.data.substring(0, 200));\n    \n    // CSV'yi ayrıştır\n    return new Promise((resolve, reject) => {\n      Papa.parse(response.data, {\n        header: false,\n        skipEmptyLines: true,\n        complete: (results) => {\n          try {\n            console.log('Papa Parse results:', results);\n            \n            if (!results.data || results.data.length === 0) {\n              throw new Error('CSV verisi boş veya geçersiz.');\n            }\n            \n            // Başlık satırını manuel olarak kontrol et\n            const headers = results.data[0];\n            console.log('Headers:', headers);\n            \n            // TARİH sütununu manuel olarak bul\n            let dateIndex = -1;\n            for (let i = 0; i < headers.length; i++) {\n              const header = headers[i];\n              if (header && header.toString().toUpperCase().includes('TARİH')) {\n                dateIndex = i;\n                break;\n              }\n            }\n            \n            console.log('Manually found date index:', dateIndex);\n            \n            // Eğer TARİH sütunu bulunamadıysa, ilk sütunu kullan\n            if (dateIndex === -1) {\n              console.warn('TARİH sütunu bulunamadı, ilk sütun kullanılıyor');\n              dateIndex = 0;\n            }\n            \n            // Veriyi manuel olarak işle\n            const processedData = [];\n            for (let i = 1; i < results.data.length; i++) {\n              const row = results.data[i];\n              if (!row || row.length < 2) continue;\n              \n              const dateStr = row[dateIndex];\n              if (!dateStr) continue;\n              \n              // Tarih formatını kontrol et\n              const dateObj = parseDate(dateStr.toString());\n              if (!dateObj) continue;\n              \n              // Menü öğelerini topla\n              const menuItems = [];\n              for (let j = 0; j < row.length; j++) {\n                if (j !== dateIndex && row[j] && row[j].toString().trim() && \n                    !row[j].toString().toLowerCase().includes('kkal')) {\n                  menuItems.push(row[j].toString().trim());\n                }\n              }\n              \n              if (menuItems.length > 0) {\n                processedData.push({\n                  date: dateObj,\n                  items: menuItems\n                });\n              }\n            }\n            \n            console.log('Processed data:', processedData);\n            \n            if (processedData.length === 0) {\n              throw new Error('İşlenebilir menü verisi bulunamadı.');\n            }\n            \n            resolve(processedData);\n          } catch (err) {\n            console.error('Veri işleme hatası:', err);\n            reject(err);\n          }\n        },\n        error: (error) => {\n          console.error('CSV ayrıştırma hatası:', error);\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('CSV verisi alınırken hata oluştu:', error);\n    throw error;\n  }\n};      "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}